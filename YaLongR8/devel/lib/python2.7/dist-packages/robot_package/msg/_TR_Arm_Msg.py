# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from robot_package/TR_Arm_Msg.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class TR_Arm_Msg(genpy.Message):
  _md5sum = "a31b03a07f77ff5658a0c1284b706f5b"
  _type = "robot_package/TR_Arm_Msg"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """string name
int32 dof
bool servoState
bool clawState
float32[] terminal
float32[] joints
float32[] homogeneousMatrix

float32[] float_array
int32 integer_value"""
  __slots__ = ['name','dof','servoState','clawState','terminal','joints','homogeneousMatrix','float_array','integer_value']
  _slot_types = ['string','int32','bool','bool','float32[]','float32[]','float32[]','float32[]','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       name,dof,servoState,clawState,terminal,joints,homogeneousMatrix,float_array,integer_value

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(TR_Arm_Msg, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.name is None:
        self.name = ''
      if self.dof is None:
        self.dof = 0
      if self.servoState is None:
        self.servoState = False
      if self.clawState is None:
        self.clawState = False
      if self.terminal is None:
        self.terminal = []
      if self.joints is None:
        self.joints = []
      if self.homogeneousMatrix is None:
        self.homogeneousMatrix = []
      if self.float_array is None:
        self.float_array = []
      if self.integer_value is None:
        self.integer_value = 0
    else:
      self.name = ''
      self.dof = 0
      self.servoState = False
      self.clawState = False
      self.terminal = []
      self.joints = []
      self.homogeneousMatrix = []
      self.float_array = []
      self.integer_value = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_i2B().pack(_x.dof, _x.servoState, _x.clawState))
      length = len(self.terminal)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.terminal))
      length = len(self.joints)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.joints))
      length = len(self.homogeneousMatrix)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.homogeneousMatrix))
      length = len(self.float_array)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.float_array))
      _x = self.integer_value
      buff.write(_get_struct_i().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.name = str[start:end]
      _x = self
      start = end
      end += 6
      (_x.dof, _x.servoState, _x.clawState,) = _get_struct_i2B().unpack(str[start:end])
      self.servoState = bool(self.servoState)
      self.clawState = bool(self.clawState)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.terminal = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.joints = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.homogeneousMatrix = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.float_array = s.unpack(str[start:end])
      start = end
      end += 4
      (self.integer_value,) = _get_struct_i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_i2B().pack(_x.dof, _x.servoState, _x.clawState))
      length = len(self.terminal)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.terminal.tostring())
      length = len(self.joints)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.joints.tostring())
      length = len(self.homogeneousMatrix)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.homogeneousMatrix.tostring())
      length = len(self.float_array)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.float_array.tostring())
      _x = self.integer_value
      buff.write(_get_struct_i().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.name = str[start:end]
      _x = self
      start = end
      end += 6
      (_x.dof, _x.servoState, _x.clawState,) = _get_struct_i2B().unpack(str[start:end])
      self.servoState = bool(self.servoState)
      self.clawState = bool(self.clawState)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.terminal = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.joints = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.homogeneousMatrix = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.float_array = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (self.integer_value,) = _get_struct_i().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_i = None
def _get_struct_i():
    global _struct_i
    if _struct_i is None:
        _struct_i = struct.Struct("<i")
    return _struct_i
_struct_i2B = None
def _get_struct_i2B():
    global _struct_i2B
    if _struct_i2B is None:
        _struct_i2B = struct.Struct("<i2B")
    return _struct_i2B
