# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from robot_package/TR_Vehicle_Msg.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class TR_Vehicle_Msg(genpy.Message):
  _md5sum = "7c1c171ba287db99c1eb25bb64fd0b2f"
  _type = "robot_package/TR_Vehicle_Msg"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """int32 vehicleServoState
float32 vehicle_x_vel                            # mm/s
float32 vehicle_y_vel                            # mm/s
float32 vehicle_z_vel                            # rad/s

float32[] wheelVel                              # rad/s
float32[] servoPos                              # rad

int8[] sonar            """
  __slots__ = ['vehicleServoState','vehicle_x_vel','vehicle_y_vel','vehicle_z_vel','wheelVel','servoPos','sonar']
  _slot_types = ['int32','float32','float32','float32','float32[]','float32[]','int8[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       vehicleServoState,vehicle_x_vel,vehicle_y_vel,vehicle_z_vel,wheelVel,servoPos,sonar

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(TR_Vehicle_Msg, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.vehicleServoState is None:
        self.vehicleServoState = 0
      if self.vehicle_x_vel is None:
        self.vehicle_x_vel = 0.
      if self.vehicle_y_vel is None:
        self.vehicle_y_vel = 0.
      if self.vehicle_z_vel is None:
        self.vehicle_z_vel = 0.
      if self.wheelVel is None:
        self.wheelVel = []
      if self.servoPos is None:
        self.servoPos = []
      if self.sonar is None:
        self.sonar = []
    else:
      self.vehicleServoState = 0
      self.vehicle_x_vel = 0.
      self.vehicle_y_vel = 0.
      self.vehicle_z_vel = 0.
      self.wheelVel = []
      self.servoPos = []
      self.sonar = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_i3f().pack(_x.vehicleServoState, _x.vehicle_x_vel, _x.vehicle_y_vel, _x.vehicle_z_vel))
      length = len(self.wheelVel)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.wheelVel))
      length = len(self.servoPos)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.servoPos))
      length = len(self.sonar)
      buff.write(_struct_I.pack(length))
      pattern = '<%sb'%length
      buff.write(struct.Struct(pattern).pack(*self.sonar))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 16
      (_x.vehicleServoState, _x.vehicle_x_vel, _x.vehicle_y_vel, _x.vehicle_z_vel,) = _get_struct_i3f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.wheelVel = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.servoPos = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sb'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.sonar = s.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_i3f().pack(_x.vehicleServoState, _x.vehicle_x_vel, _x.vehicle_y_vel, _x.vehicle_z_vel))
      length = len(self.wheelVel)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.wheelVel.tostring())
      length = len(self.servoPos)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.servoPos.tostring())
      length = len(self.sonar)
      buff.write(_struct_I.pack(length))
      pattern = '<%sb'%length
      buff.write(self.sonar.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 16
      (_x.vehicleServoState, _x.vehicle_x_vel, _x.vehicle_y_vel, _x.vehicle_z_vel,) = _get_struct_i3f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.wheelVel = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.servoPos = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sb'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.sonar = numpy.frombuffer(str[start:end], dtype=numpy.int8, count=length)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_i3f = None
def _get_struct_i3f():
    global _struct_i3f
    if _struct_i3f is None:
        _struct_i3f = struct.Struct("<i3f")
    return _struct_i3f
