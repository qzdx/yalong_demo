# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from robot_package/TR_Vehicle_IMU_Msg.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class TR_Vehicle_IMU_Msg(genpy.Message):
  _md5sum = "f5a5798f0264f71a56bc6105bff0acc0"
  _type = "robot_package/TR_Vehicle_IMU_Msg"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """
    int16 ppsSyncStamp
    int8 temprature
    float32 pressure
    uint32 timestamp
    float32[] acc
    float32[] gyr
    float32[] mag
    float32[] eul
    float32[] quat"""
  __slots__ = ['ppsSyncStamp','temprature','pressure','timestamp','acc','gyr','mag','eul','quat']
  _slot_types = ['int16','int8','float32','uint32','float32[]','float32[]','float32[]','float32[]','float32[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       ppsSyncStamp,temprature,pressure,timestamp,acc,gyr,mag,eul,quat

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(TR_Vehicle_IMU_Msg, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.ppsSyncStamp is None:
        self.ppsSyncStamp = 0
      if self.temprature is None:
        self.temprature = 0
      if self.pressure is None:
        self.pressure = 0.
      if self.timestamp is None:
        self.timestamp = 0
      if self.acc is None:
        self.acc = []
      if self.gyr is None:
        self.gyr = []
      if self.mag is None:
        self.mag = []
      if self.eul is None:
        self.eul = []
      if self.quat is None:
        self.quat = []
    else:
      self.ppsSyncStamp = 0
      self.temprature = 0
      self.pressure = 0.
      self.timestamp = 0
      self.acc = []
      self.gyr = []
      self.mag = []
      self.eul = []
      self.quat = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_hbfI().pack(_x.ppsSyncStamp, _x.temprature, _x.pressure, _x.timestamp))
      length = len(self.acc)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.acc))
      length = len(self.gyr)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.gyr))
      length = len(self.mag)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.mag))
      length = len(self.eul)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.eul))
      length = len(self.quat)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.quat))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 11
      (_x.ppsSyncStamp, _x.temprature, _x.pressure, _x.timestamp,) = _get_struct_hbfI().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.acc = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.gyr = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.mag = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.eul = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.quat = s.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_hbfI().pack(_x.ppsSyncStamp, _x.temprature, _x.pressure, _x.timestamp))
      length = len(self.acc)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.acc.tostring())
      length = len(self.gyr)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.gyr.tostring())
      length = len(self.mag)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.mag.tostring())
      length = len(self.eul)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.eul.tostring())
      length = len(self.quat)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.quat.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 11
      (_x.ppsSyncStamp, _x.temprature, _x.pressure, _x.timestamp,) = _get_struct_hbfI().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.acc = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.gyr = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.mag = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.eul = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.quat = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_hbfI = None
def _get_struct_hbfI():
    global _struct_hbfI
    if _struct_hbfI is None:
        _struct_hbfI = struct.Struct("<hbfI")
    return _struct_hbfI
