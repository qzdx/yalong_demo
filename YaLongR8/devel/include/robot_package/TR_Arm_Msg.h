// Generated by gencpp from file robot_package/TR_Arm_Msg.msg
// DO NOT EDIT!


#ifndef ROBOT_PACKAGE_MESSAGE_TR_ARM_MSG_H
#define ROBOT_PACKAGE_MESSAGE_TR_ARM_MSG_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace robot_package
{
template <class ContainerAllocator>
struct TR_Arm_Msg_
{
  typedef TR_Arm_Msg_<ContainerAllocator> Type;

  TR_Arm_Msg_()
    : name()
    , dof(0)
    , servoState(false)
    , clawState(false)
    , terminal()
    , joints()
    , homogeneousMatrix()
    , float_array()
    , integer_value(0)  {
    }
  TR_Arm_Msg_(const ContainerAllocator& _alloc)
    : name(_alloc)
    , dof(0)
    , servoState(false)
    , clawState(false)
    , terminal(_alloc)
    , joints(_alloc)
    , homogeneousMatrix(_alloc)
    , float_array(_alloc)
    , integer_value(0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _name_type;
  _name_type name;

   typedef int32_t _dof_type;
  _dof_type dof;

   typedef uint8_t _servoState_type;
  _servoState_type servoState;

   typedef uint8_t _clawState_type;
  _clawState_type clawState;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _terminal_type;
  _terminal_type terminal;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _joints_type;
  _joints_type joints;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _homogeneousMatrix_type;
  _homogeneousMatrix_type homogeneousMatrix;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _float_array_type;
  _float_array_type float_array;

   typedef int32_t _integer_value_type;
  _integer_value_type integer_value;





  typedef boost::shared_ptr< ::robot_package::TR_Arm_Msg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robot_package::TR_Arm_Msg_<ContainerAllocator> const> ConstPtr;

}; // struct TR_Arm_Msg_

typedef ::robot_package::TR_Arm_Msg_<std::allocator<void> > TR_Arm_Msg;

typedef boost::shared_ptr< ::robot_package::TR_Arm_Msg > TR_Arm_MsgPtr;
typedef boost::shared_ptr< ::robot_package::TR_Arm_Msg const> TR_Arm_MsgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robot_package::TR_Arm_Msg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robot_package::TR_Arm_Msg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robot_package::TR_Arm_Msg_<ContainerAllocator1> & lhs, const ::robot_package::TR_Arm_Msg_<ContainerAllocator2> & rhs)
{
  return lhs.name == rhs.name &&
    lhs.dof == rhs.dof &&
    lhs.servoState == rhs.servoState &&
    lhs.clawState == rhs.clawState &&
    lhs.terminal == rhs.terminal &&
    lhs.joints == rhs.joints &&
    lhs.homogeneousMatrix == rhs.homogeneousMatrix &&
    lhs.float_array == rhs.float_array &&
    lhs.integer_value == rhs.integer_value;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robot_package::TR_Arm_Msg_<ContainerAllocator1> & lhs, const ::robot_package::TR_Arm_Msg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robot_package

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::robot_package::TR_Arm_Msg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robot_package::TR_Arm_Msg_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_package::TR_Arm_Msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_package::TR_Arm_Msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_package::TR_Arm_Msg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_package::TR_Arm_Msg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robot_package::TR_Arm_Msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a31b03a07f77ff5658a0c1284b706f5b";
  }

  static const char* value(const ::robot_package::TR_Arm_Msg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa31b03a07f77ff56ULL;
  static const uint64_t static_value2 = 0x58a0c1284b706f5bULL;
};

template<class ContainerAllocator>
struct DataType< ::robot_package::TR_Arm_Msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robot_package/TR_Arm_Msg";
  }

  static const char* value(const ::robot_package::TR_Arm_Msg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robot_package::TR_Arm_Msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string name\n"
"int32 dof\n"
"bool servoState\n"
"bool clawState\n"
"float32[] terminal\n"
"float32[] joints\n"
"float32[] homogeneousMatrix\n"
"\n"
"float32[] float_array\n"
"int32 integer_value\n"
;
  }

  static const char* value(const ::robot_package::TR_Arm_Msg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robot_package::TR_Arm_Msg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.name);
      stream.next(m.dof);
      stream.next(m.servoState);
      stream.next(m.clawState);
      stream.next(m.terminal);
      stream.next(m.joints);
      stream.next(m.homogeneousMatrix);
      stream.next(m.float_array);
      stream.next(m.integer_value);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TR_Arm_Msg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robot_package::TR_Arm_Msg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robot_package::TR_Arm_Msg_<ContainerAllocator>& v)
  {
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.name);
    s << indent << "dof: ";
    Printer<int32_t>::stream(s, indent + "  ", v.dof);
    s << indent << "servoState: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.servoState);
    s << indent << "clawState: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.clawState);
    s << indent << "terminal[]" << std::endl;
    for (size_t i = 0; i < v.terminal.size(); ++i)
    {
      s << indent << "  terminal[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.terminal[i]);
    }
    s << indent << "joints[]" << std::endl;
    for (size_t i = 0; i < v.joints.size(); ++i)
    {
      s << indent << "  joints[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.joints[i]);
    }
    s << indent << "homogeneousMatrix[]" << std::endl;
    for (size_t i = 0; i < v.homogeneousMatrix.size(); ++i)
    {
      s << indent << "  homogeneousMatrix[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.homogeneousMatrix[i]);
    }
    s << indent << "float_array[]" << std::endl;
    for (size_t i = 0; i < v.float_array.size(); ++i)
    {
      s << indent << "  float_array[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.float_array[i]);
    }
    s << indent << "integer_value: ";
    Printer<int32_t>::stream(s, indent + "  ", v.integer_value);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOT_PACKAGE_MESSAGE_TR_ARM_MSG_H
