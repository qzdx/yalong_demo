// Generated by gencpp from file robot_package/TR_Vehicle_IMU_Msg.msg
// DO NOT EDIT!


#ifndef ROBOT_PACKAGE_MESSAGE_TR_VEHICLE_IMU_MSG_H
#define ROBOT_PACKAGE_MESSAGE_TR_VEHICLE_IMU_MSG_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace robot_package
{
template <class ContainerAllocator>
struct TR_Vehicle_IMU_Msg_
{
  typedef TR_Vehicle_IMU_Msg_<ContainerAllocator> Type;

  TR_Vehicle_IMU_Msg_()
    : ppsSyncStamp(0)
    , temprature(0)
    , pressure(0.0)
    , timestamp(0)
    , acc()
    , gyr()
    , mag()
    , eul()
    , quat()  {
    }
  TR_Vehicle_IMU_Msg_(const ContainerAllocator& _alloc)
    : ppsSyncStamp(0)
    , temprature(0)
    , pressure(0.0)
    , timestamp(0)
    , acc(_alloc)
    , gyr(_alloc)
    , mag(_alloc)
    , eul(_alloc)
    , quat(_alloc)  {
  (void)_alloc;
    }



   typedef int16_t _ppsSyncStamp_type;
  _ppsSyncStamp_type ppsSyncStamp;

   typedef int8_t _temprature_type;
  _temprature_type temprature;

   typedef float _pressure_type;
  _pressure_type pressure;

   typedef uint32_t _timestamp_type;
  _timestamp_type timestamp;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _acc_type;
  _acc_type acc;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _gyr_type;
  _gyr_type gyr;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _mag_type;
  _mag_type mag;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _eul_type;
  _eul_type eul;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _quat_type;
  _quat_type quat;





  typedef boost::shared_ptr< ::robot_package::TR_Vehicle_IMU_Msg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robot_package::TR_Vehicle_IMU_Msg_<ContainerAllocator> const> ConstPtr;

}; // struct TR_Vehicle_IMU_Msg_

typedef ::robot_package::TR_Vehicle_IMU_Msg_<std::allocator<void> > TR_Vehicle_IMU_Msg;

typedef boost::shared_ptr< ::robot_package::TR_Vehicle_IMU_Msg > TR_Vehicle_IMU_MsgPtr;
typedef boost::shared_ptr< ::robot_package::TR_Vehicle_IMU_Msg const> TR_Vehicle_IMU_MsgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robot_package::TR_Vehicle_IMU_Msg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robot_package::TR_Vehicle_IMU_Msg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robot_package::TR_Vehicle_IMU_Msg_<ContainerAllocator1> & lhs, const ::robot_package::TR_Vehicle_IMU_Msg_<ContainerAllocator2> & rhs)
{
  return lhs.ppsSyncStamp == rhs.ppsSyncStamp &&
    lhs.temprature == rhs.temprature &&
    lhs.pressure == rhs.pressure &&
    lhs.timestamp == rhs.timestamp &&
    lhs.acc == rhs.acc &&
    lhs.gyr == rhs.gyr &&
    lhs.mag == rhs.mag &&
    lhs.eul == rhs.eul &&
    lhs.quat == rhs.quat;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robot_package::TR_Vehicle_IMU_Msg_<ContainerAllocator1> & lhs, const ::robot_package::TR_Vehicle_IMU_Msg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robot_package

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::robot_package::TR_Vehicle_IMU_Msg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robot_package::TR_Vehicle_IMU_Msg_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_package::TR_Vehicle_IMU_Msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_package::TR_Vehicle_IMU_Msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_package::TR_Vehicle_IMU_Msg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_package::TR_Vehicle_IMU_Msg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robot_package::TR_Vehicle_IMU_Msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f5a5798f0264f71a56bc6105bff0acc0";
  }

  static const char* value(const ::robot_package::TR_Vehicle_IMU_Msg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf5a5798f0264f71aULL;
  static const uint64_t static_value2 = 0x56bc6105bff0acc0ULL;
};

template<class ContainerAllocator>
struct DataType< ::robot_package::TR_Vehicle_IMU_Msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robot_package/TR_Vehicle_IMU_Msg";
  }

  static const char* value(const ::robot_package::TR_Vehicle_IMU_Msg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robot_package::TR_Vehicle_IMU_Msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n"
"    int16 ppsSyncStamp\n"
"    int8 temprature\n"
"    float32 pressure\n"
"    uint32 timestamp\n"
"    float32[] acc\n"
"    float32[] gyr\n"
"    float32[] mag\n"
"    float32[] eul\n"
"    float32[] quat\n"
;
  }

  static const char* value(const ::robot_package::TR_Vehicle_IMU_Msg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robot_package::TR_Vehicle_IMU_Msg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.ppsSyncStamp);
      stream.next(m.temprature);
      stream.next(m.pressure);
      stream.next(m.timestamp);
      stream.next(m.acc);
      stream.next(m.gyr);
      stream.next(m.mag);
      stream.next(m.eul);
      stream.next(m.quat);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TR_Vehicle_IMU_Msg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robot_package::TR_Vehicle_IMU_Msg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robot_package::TR_Vehicle_IMU_Msg_<ContainerAllocator>& v)
  {
    s << indent << "ppsSyncStamp: ";
    Printer<int16_t>::stream(s, indent + "  ", v.ppsSyncStamp);
    s << indent << "temprature: ";
    Printer<int8_t>::stream(s, indent + "  ", v.temprature);
    s << indent << "pressure: ";
    Printer<float>::stream(s, indent + "  ", v.pressure);
    s << indent << "timestamp: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.timestamp);
    s << indent << "acc[]" << std::endl;
    for (size_t i = 0; i < v.acc.size(); ++i)
    {
      s << indent << "  acc[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.acc[i]);
    }
    s << indent << "gyr[]" << std::endl;
    for (size_t i = 0; i < v.gyr.size(); ++i)
    {
      s << indent << "  gyr[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.gyr[i]);
    }
    s << indent << "mag[]" << std::endl;
    for (size_t i = 0; i < v.mag.size(); ++i)
    {
      s << indent << "  mag[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.mag[i]);
    }
    s << indent << "eul[]" << std::endl;
    for (size_t i = 0; i < v.eul.size(); ++i)
    {
      s << indent << "  eul[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.eul[i]);
    }
    s << indent << "quat[]" << std::endl;
    for (size_t i = 0; i < v.quat.size(); ++i)
    {
      s << indent << "  quat[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.quat[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOT_PACKAGE_MESSAGE_TR_VEHICLE_IMU_MSG_H
