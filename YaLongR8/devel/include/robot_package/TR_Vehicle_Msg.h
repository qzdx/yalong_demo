// Generated by gencpp from file robot_package/TR_Vehicle_Msg.msg
// DO NOT EDIT!


#ifndef ROBOT_PACKAGE_MESSAGE_TR_VEHICLE_MSG_H
#define ROBOT_PACKAGE_MESSAGE_TR_VEHICLE_MSG_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace robot_package
{
template <class ContainerAllocator>
struct TR_Vehicle_Msg_
{
  typedef TR_Vehicle_Msg_<ContainerAllocator> Type;

  TR_Vehicle_Msg_()
    : vehicleServoState(0)
    , vehicle_x_vel(0.0)
    , vehicle_y_vel(0.0)
    , vehicle_z_vel(0.0)
    , wheelVel()
    , servoPos()
    , sonar()  {
    }
  TR_Vehicle_Msg_(const ContainerAllocator& _alloc)
    : vehicleServoState(0)
    , vehicle_x_vel(0.0)
    , vehicle_y_vel(0.0)
    , vehicle_z_vel(0.0)
    , wheelVel(_alloc)
    , servoPos(_alloc)
    , sonar(_alloc)  {
  (void)_alloc;
    }



   typedef int32_t _vehicleServoState_type;
  _vehicleServoState_type vehicleServoState;

   typedef float _vehicle_x_vel_type;
  _vehicle_x_vel_type vehicle_x_vel;

   typedef float _vehicle_y_vel_type;
  _vehicle_y_vel_type vehicle_y_vel;

   typedef float _vehicle_z_vel_type;
  _vehicle_z_vel_type vehicle_z_vel;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _wheelVel_type;
  _wheelVel_type wheelVel;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _servoPos_type;
  _servoPos_type servoPos;

   typedef std::vector<int8_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<int8_t>> _sonar_type;
  _sonar_type sonar;





  typedef boost::shared_ptr< ::robot_package::TR_Vehicle_Msg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robot_package::TR_Vehicle_Msg_<ContainerAllocator> const> ConstPtr;

}; // struct TR_Vehicle_Msg_

typedef ::robot_package::TR_Vehicle_Msg_<std::allocator<void> > TR_Vehicle_Msg;

typedef boost::shared_ptr< ::robot_package::TR_Vehicle_Msg > TR_Vehicle_MsgPtr;
typedef boost::shared_ptr< ::robot_package::TR_Vehicle_Msg const> TR_Vehicle_MsgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robot_package::TR_Vehicle_Msg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robot_package::TR_Vehicle_Msg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robot_package::TR_Vehicle_Msg_<ContainerAllocator1> & lhs, const ::robot_package::TR_Vehicle_Msg_<ContainerAllocator2> & rhs)
{
  return lhs.vehicleServoState == rhs.vehicleServoState &&
    lhs.vehicle_x_vel == rhs.vehicle_x_vel &&
    lhs.vehicle_y_vel == rhs.vehicle_y_vel &&
    lhs.vehicle_z_vel == rhs.vehicle_z_vel &&
    lhs.wheelVel == rhs.wheelVel &&
    lhs.servoPos == rhs.servoPos &&
    lhs.sonar == rhs.sonar;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robot_package::TR_Vehicle_Msg_<ContainerAllocator1> & lhs, const ::robot_package::TR_Vehicle_Msg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robot_package

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::robot_package::TR_Vehicle_Msg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robot_package::TR_Vehicle_Msg_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_package::TR_Vehicle_Msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_package::TR_Vehicle_Msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_package::TR_Vehicle_Msg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_package::TR_Vehicle_Msg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robot_package::TR_Vehicle_Msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7c1c171ba287db99c1eb25bb64fd0b2f";
  }

  static const char* value(const ::robot_package::TR_Vehicle_Msg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7c1c171ba287db99ULL;
  static const uint64_t static_value2 = 0xc1eb25bb64fd0b2fULL;
};

template<class ContainerAllocator>
struct DataType< ::robot_package::TR_Vehicle_Msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robot_package/TR_Vehicle_Msg";
  }

  static const char* value(const ::robot_package::TR_Vehicle_Msg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robot_package::TR_Vehicle_Msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 vehicleServoState\n"
"float32 vehicle_x_vel                            # mm/s\n"
"float32 vehicle_y_vel                            # mm/s\n"
"float32 vehicle_z_vel                            # rad/s\n"
"\n"
"float32[] wheelVel                              # rad/s\n"
"float32[] servoPos                              # rad\n"
"\n"
"int8[] sonar            \n"
;
  }

  static const char* value(const ::robot_package::TR_Vehicle_Msg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robot_package::TR_Vehicle_Msg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.vehicleServoState);
      stream.next(m.vehicle_x_vel);
      stream.next(m.vehicle_y_vel);
      stream.next(m.vehicle_z_vel);
      stream.next(m.wheelVel);
      stream.next(m.servoPos);
      stream.next(m.sonar);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TR_Vehicle_Msg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robot_package::TR_Vehicle_Msg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robot_package::TR_Vehicle_Msg_<ContainerAllocator>& v)
  {
    s << indent << "vehicleServoState: ";
    Printer<int32_t>::stream(s, indent + "  ", v.vehicleServoState);
    s << indent << "vehicle_x_vel: ";
    Printer<float>::stream(s, indent + "  ", v.vehicle_x_vel);
    s << indent << "vehicle_y_vel: ";
    Printer<float>::stream(s, indent + "  ", v.vehicle_y_vel);
    s << indent << "vehicle_z_vel: ";
    Printer<float>::stream(s, indent + "  ", v.vehicle_z_vel);
    s << indent << "wheelVel[]" << std::endl;
    for (size_t i = 0; i < v.wheelVel.size(); ++i)
    {
      s << indent << "  wheelVel[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.wheelVel[i]);
    }
    s << indent << "servoPos[]" << std::endl;
    for (size_t i = 0; i < v.servoPos.size(); ++i)
    {
      s << indent << "  servoPos[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.servoPos[i]);
    }
    s << indent << "sonar[]" << std::endl;
    for (size_t i = 0; i < v.sonar.size(); ++i)
    {
      s << indent << "  sonar[" << i << "]: ";
      Printer<int8_t>::stream(s, indent + "  ", v.sonar[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOT_PACKAGE_MESSAGE_TR_VEHICLE_MSG_H
