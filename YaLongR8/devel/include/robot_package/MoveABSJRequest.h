// Generated by gencpp from file robot_package/MoveABSJRequest.msg
// DO NOT EDIT!


#ifndef ROBOT_PACKAGE_MESSAGE_MOVEABSJREQUEST_H
#define ROBOT_PACKAGE_MESSAGE_MOVEABSJREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace robot_package
{
template <class ContainerAllocator>
struct MoveABSJRequest_
{
  typedef MoveABSJRequest_<ContainerAllocator> Type;

  MoveABSJRequest_()
    : arm_index(0)
    , relative(false)
    , vel(0.0)
    , joints()  {
    }
  MoveABSJRequest_(const ContainerAllocator& _alloc)
    : arm_index(0)
    , relative(false)
    , vel(0.0)
    , joints(_alloc)  {
  (void)_alloc;
    }



   typedef int8_t _arm_index_type;
  _arm_index_type arm_index;

   typedef uint8_t _relative_type;
  _relative_type relative;

   typedef float _vel_type;
  _vel_type vel;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _joints_type;
  _joints_type joints;





  typedef boost::shared_ptr< ::robot_package::MoveABSJRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robot_package::MoveABSJRequest_<ContainerAllocator> const> ConstPtr;

}; // struct MoveABSJRequest_

typedef ::robot_package::MoveABSJRequest_<std::allocator<void> > MoveABSJRequest;

typedef boost::shared_ptr< ::robot_package::MoveABSJRequest > MoveABSJRequestPtr;
typedef boost::shared_ptr< ::robot_package::MoveABSJRequest const> MoveABSJRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robot_package::MoveABSJRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robot_package::MoveABSJRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robot_package::MoveABSJRequest_<ContainerAllocator1> & lhs, const ::robot_package::MoveABSJRequest_<ContainerAllocator2> & rhs)
{
  return lhs.arm_index == rhs.arm_index &&
    lhs.relative == rhs.relative &&
    lhs.vel == rhs.vel &&
    lhs.joints == rhs.joints;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robot_package::MoveABSJRequest_<ContainerAllocator1> & lhs, const ::robot_package::MoveABSJRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robot_package

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::robot_package::MoveABSJRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robot_package::MoveABSJRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_package::MoveABSJRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_package::MoveABSJRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_package::MoveABSJRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_package::MoveABSJRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robot_package::MoveABSJRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f211777051c60ebc273544fc7e82ea53";
  }

  static const char* value(const ::robot_package::MoveABSJRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf211777051c60ebcULL;
  static const uint64_t static_value2 = 0x273544fc7e82ea53ULL;
};

template<class ContainerAllocator>
struct DataType< ::robot_package::MoveABSJRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robot_package/MoveABSJRequest";
  }

  static const char* value(const ::robot_package::MoveABSJRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robot_package::MoveABSJRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int8 arm_index\n"
"bool relative\n"
"float32 vel\n"
"float32[] joints\n"
;
  }

  static const char* value(const ::robot_package::MoveABSJRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robot_package::MoveABSJRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.arm_index);
      stream.next(m.relative);
      stream.next(m.vel);
      stream.next(m.joints);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MoveABSJRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robot_package::MoveABSJRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robot_package::MoveABSJRequest_<ContainerAllocator>& v)
  {
    s << indent << "arm_index: ";
    Printer<int8_t>::stream(s, indent + "  ", v.arm_index);
    s << indent << "relative: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.relative);
    s << indent << "vel: ";
    Printer<float>::stream(s, indent + "  ", v.vel);
    s << indent << "joints[]" << std::endl;
    for (size_t i = 0; i < v.joints.size(); ++i)
    {
      s << indent << "  joints[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.joints[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOT_PACKAGE_MESSAGE_MOVEABSJREQUEST_H
