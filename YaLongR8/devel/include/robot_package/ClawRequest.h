// Generated by gencpp from file robot_package/ClawRequest.msg
// DO NOT EDIT!


#ifndef ROBOT_PACKAGE_MESSAGE_CLAWREQUEST_H
#define ROBOT_PACKAGE_MESSAGE_CLAWREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace robot_package
{
template <class ContainerAllocator>
struct ClawRequest_
{
  typedef ClawRequest_<ContainerAllocator> Type;

  ClawRequest_()
    : arm_index(0)
    , clawState(false)  {
    }
  ClawRequest_(const ContainerAllocator& _alloc)
    : arm_index(0)
    , clawState(false)  {
  (void)_alloc;
    }



   typedef int8_t _arm_index_type;
  _arm_index_type arm_index;

   typedef uint8_t _clawState_type;
  _clawState_type clawState;





  typedef boost::shared_ptr< ::robot_package::ClawRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robot_package::ClawRequest_<ContainerAllocator> const> ConstPtr;

}; // struct ClawRequest_

typedef ::robot_package::ClawRequest_<std::allocator<void> > ClawRequest;

typedef boost::shared_ptr< ::robot_package::ClawRequest > ClawRequestPtr;
typedef boost::shared_ptr< ::robot_package::ClawRequest const> ClawRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robot_package::ClawRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robot_package::ClawRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robot_package::ClawRequest_<ContainerAllocator1> & lhs, const ::robot_package::ClawRequest_<ContainerAllocator2> & rhs)
{
  return lhs.arm_index == rhs.arm_index &&
    lhs.clawState == rhs.clawState;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robot_package::ClawRequest_<ContainerAllocator1> & lhs, const ::robot_package::ClawRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robot_package

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::robot_package::ClawRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robot_package::ClawRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_package::ClawRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_package::ClawRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_package::ClawRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_package::ClawRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robot_package::ClawRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2715a77e2d0044cb2aeab5d4197bbebb";
  }

  static const char* value(const ::robot_package::ClawRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2715a77e2d0044cbULL;
  static const uint64_t static_value2 = 0x2aeab5d4197bbebbULL;
};

template<class ContainerAllocator>
struct DataType< ::robot_package::ClawRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robot_package/ClawRequest";
  }

  static const char* value(const ::robot_package::ClawRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robot_package::ClawRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int8 arm_index\n"
"bool clawState\n"
"\n"
;
  }

  static const char* value(const ::robot_package::ClawRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robot_package::ClawRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.arm_index);
      stream.next(m.clawState);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ClawRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robot_package::ClawRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robot_package::ClawRequest_<ContainerAllocator>& v)
  {
    s << indent << "arm_index: ";
    Printer<int8_t>::stream(s, indent + "  ", v.arm_index);
    s << indent << "clawState: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.clawState);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOT_PACKAGE_MESSAGE_CLAWREQUEST_H
