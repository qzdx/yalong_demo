// Generated by gencpp from file robot_package/VehicleControlRequest.msg
// DO NOT EDIT!


#ifndef ROBOT_PACKAGE_MESSAGE_VEHICLECONTROLREQUEST_H
#define ROBOT_PACKAGE_MESSAGE_VEHICLECONTROLREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace robot_package
{
template <class ContainerAllocator>
struct VehicleControlRequest_
{
  typedef VehicleControlRequest_<ContainerAllocator> Type;

  VehicleControlRequest_()
    : mode(0)
    , vehicle_x_vel(0.0)
    , vehicle_y_vel(0.0)
    , vehicle_z_vel(0.0)  {
    }
  VehicleControlRequest_(const ContainerAllocator& _alloc)
    : mode(0)
    , vehicle_x_vel(0.0)
    , vehicle_y_vel(0.0)
    , vehicle_z_vel(0.0)  {
  (void)_alloc;
    }



   typedef int32_t _mode_type;
  _mode_type mode;

   typedef float _vehicle_x_vel_type;
  _vehicle_x_vel_type vehicle_x_vel;

   typedef float _vehicle_y_vel_type;
  _vehicle_y_vel_type vehicle_y_vel;

   typedef float _vehicle_z_vel_type;
  _vehicle_z_vel_type vehicle_z_vel;





  typedef boost::shared_ptr< ::robot_package::VehicleControlRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robot_package::VehicleControlRequest_<ContainerAllocator> const> ConstPtr;

}; // struct VehicleControlRequest_

typedef ::robot_package::VehicleControlRequest_<std::allocator<void> > VehicleControlRequest;

typedef boost::shared_ptr< ::robot_package::VehicleControlRequest > VehicleControlRequestPtr;
typedef boost::shared_ptr< ::robot_package::VehicleControlRequest const> VehicleControlRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robot_package::VehicleControlRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robot_package::VehicleControlRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robot_package::VehicleControlRequest_<ContainerAllocator1> & lhs, const ::robot_package::VehicleControlRequest_<ContainerAllocator2> & rhs)
{
  return lhs.mode == rhs.mode &&
    lhs.vehicle_x_vel == rhs.vehicle_x_vel &&
    lhs.vehicle_y_vel == rhs.vehicle_y_vel &&
    lhs.vehicle_z_vel == rhs.vehicle_z_vel;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robot_package::VehicleControlRequest_<ContainerAllocator1> & lhs, const ::robot_package::VehicleControlRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robot_package

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::robot_package::VehicleControlRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robot_package::VehicleControlRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_package::VehicleControlRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_package::VehicleControlRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_package::VehicleControlRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_package::VehicleControlRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robot_package::VehicleControlRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dff672096552495d42c27d125d0602ab";
  }

  static const char* value(const ::robot_package::VehicleControlRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xdff672096552495dULL;
  static const uint64_t static_value2 = 0x42c27d125d0602abULL;
};

template<class ContainerAllocator>
struct DataType< ::robot_package::VehicleControlRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robot_package/VehicleControlRequest";
  }

  static const char* value(const ::robot_package::VehicleControlRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robot_package::VehicleControlRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 mode\n"
"float32 vehicle_x_vel\n"
"float32 vehicle_y_vel\n"
"float32 vehicle_z_vel\n"
;
  }

  static const char* value(const ::robot_package::VehicleControlRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robot_package::VehicleControlRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.mode);
      stream.next(m.vehicle_x_vel);
      stream.next(m.vehicle_y_vel);
      stream.next(m.vehicle_z_vel);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct VehicleControlRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robot_package::VehicleControlRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robot_package::VehicleControlRequest_<ContainerAllocator>& v)
  {
    s << indent << "mode: ";
    Printer<int32_t>::stream(s, indent + "  ", v.mode);
    s << indent << "vehicle_x_vel: ";
    Printer<float>::stream(s, indent + "  ", v.vehicle_x_vel);
    s << indent << "vehicle_y_vel: ";
    Printer<float>::stream(s, indent + "  ", v.vehicle_y_vel);
    s << indent << "vehicle_z_vel: ";
    Printer<float>::stream(s, indent + "  ", v.vehicle_z_vel);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOT_PACKAGE_MESSAGE_VEHICLECONTROLREQUEST_H
